---
description: Apply these rules when creating the project
globs:
alwaysApply: true
---
## Project Overview

* **Type:** Web-Based Platform
* **Description:** Heady Lab Results is a platform designed for cannabis product retailers to securely upload PDF lab results. These results are then analyzed by an AI (GPT-4o) to generate optimized product descriptions, ensuring compliance, quality, and enhanced marketing communications.
* **Primary Goal:** Enable efficient, secure, and compliant analysis of cannabis lab results through AI-driven product description generation, while providing robust role-based access and subscription management.

## Project Structure

### Framework-Specific Routing

* **Directory Rules:**

    * **Next.js 14 (App Router):** Enforce the use of an `app/` directory with nested route folders following the `app/[route]/page.tsx` conventions.
    * Example 1: "Next.js 14 (App Router)" → `app/[route]/page.tsx` conventions
    * Example 2: N/A for this project as the Pages Router is not used
    * Example 3: N/A for React Router projects

### Core Directories

* **Versioned Structure:**

    * **app:** Holds the Next.js 14 application core, including API, layout, globals, and page components (e.g., `app/api` for API routes with Route Handlers, `app/layout.tsx` for global layouts).
    * Example 1: `app/api` → "Next.js 14 API routes with Route Handlers"
    * Example 2: Other directories will store UI components and backend integration utilities as per CodeGuide Starter Pro structure.

### Key Files

* **Stack-Versioned Patterns:**

    * **`app/dashboard/layout.tsx`:** Implements the root layout for authenticated dashboard areas.
    * **`app/page.tsx`:** Serves as the entry point for the Next.js 14 App Router structure.

## Tech Stack Rules

* **Version Enforcement:**

    * **next@14:** App Router is enforced; use nested `app/` directories. Components must follow the `app/[route]/page.tsx` and layout guidelines with Server Actions when applicable.
    * **TypeScript:** Strict type-checking is required across the project.
    * **Tailwind CSS:** Must follow utility-first CSS conventions with responsive design best practices.
    * **Supabase:** Utilize as the primary backend for database, authentication, and storage integration, following Supabase’s client and server conventions.
    * **Clerk Auth:** Must be integrated via the provided starter kit, ensuring secure role-based authentication.

## PRD Compliance

* **Non-Negotiable:**

    * "Secure user accounts with role-based access (Admin, Retailer), strict PDF validations (PDF only, <1MB, <=5 pages), and integrated subscription management with Stripe must be implemented as defined." This requires adherence to file validation constraints, role management, and third-party integrations (GPT-4o, Stripe, Supabase, Clerk Auth).

## App Flow Integration

* **Stack-Aligned Flow:**

    * Example: "Next.js 14 Auth Flow → `app/auth/login/page.tsx` uses server actions to facilitate secure login and session management via Clerk Auth."
    * Routes for PDF upload, lab results processing, and dashboard access are integrated to follow the Next.js 14 App Router structure.

## Best Practices

* **Next.js 14**

    * Use the App Router exclusively; avoid mixing with Pages Router conventions.
    * Optimize server actions for efficient data fetching and processing.
    * Maintain clean separation between server and client components.

* **TypeScript**

    * Enforce strict type-checking and utilize interfaces for component props and API responses.
    * Keep types in dedicated directories (e.g., `types/`).
    * Utilize modern TypeScript features for improved code maintainability.

* **Tailwind CSS**

    * Adhere to a utility-first approach to styling.
    * Use responsive design techniques and breakpoints as defined in the Tailwind config.
    * Leverage Tailwind’s built-in best practices to minimize custom CSS.

* **Supabase**

    * Follow the official integration guidelines for secure database interactions.
    * Use Supabase Client and Server utilities for effective role management and data fetching.
    * Ensure all API calls and queries are optimized for performance.

* **Clerk Auth**

    * Integrate Clerk Auth via the starter kit to ensure secure, role-based access.
    * Regularly update authentication flows to adhere to security best practices.
    * Maintain separation of concerns by ensuring Clerk-related components are isolated within a dedicated providers directory.

* **Stripe**

    * Follow Stripe’s integration best practices for subscription and payment processing.
    * Ensure webhooks and server-side processing for payment events are securely implemented.
    * Maintain clear separation of front-end components from back-end payment logic.

## Rules

* Derive folder/file patterns **directly** from the CodeGuide Starter Pro structure and underlying tech stack versions.
* If Next.js 14 App Router: Enforce `app/` directory with nested route folders; do not mix with Pages Router patterns.
* Follow the provided file and directory structure strictly to maintain consistency with starter guidelines (e.g., `app/api`, `components/ui`, etc.).
* Maintain strict validation and authentication rules as per PRD, ensuring all version-specific constraints are adhered to (e.g., PDF validations, role management).

## Rules Metrics

Before starting the project development, create a metrics file in the root of the project called

`cursor_metrics.md`.

### Instructions:

* Each time a cursor rule is used as context, update `cursor_metrics.md`.
* Use the following format for `cursor_metrics.md:`

# Rules Metrics

## Usage

The number of times rules is used as context

* rule-name.mdc: 5
* another-rule.mdc: 2
* ...other rules

